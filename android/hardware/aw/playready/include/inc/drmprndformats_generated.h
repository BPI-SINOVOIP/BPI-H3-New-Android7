/**@@@+++@@@@******************************************************************
**
** Microsoft (r) PlayReady (r)
** Copyright (c) Microsoft Corporation. All rights reserved.
**
***@@@---@@@@******************************************************************
*/

/* This source was autogenerated by xbgen.
** DO NOT EDIT THIS SOURCE MANUALLY.
** If changes need to be applied update the XML and regenerate this source.
*/
/*
** This file defines the following generated formats
** DRM_PRND_REGISTRATION_REQUEST_MESSAGE
** DRM_PRND_REGISTRATION_RESPONSE_MESSAGE
** DRM_PRND_REGISTRATION_ERROR_MESSAGE
** DRM_PRND_PROXIMITY_DETECTION_START_MESSAGE
** DRM_PRND_PROXIMITY_DETECTION_CHALLENGE_MESSAGE
** DRM_PRND_PROXIMITY_DETECTION_RESPONSE_MESSAGE
** DRM_PRND_PROXIMITY_DETECTION_RESULT_MESSAGE
** DRM_PRND_LICENSE_REQUEST_MESSAGE
** DRM_PRND_LICENSE_TRANSMIT_MESSAGE
** DRM_PRND_LICENSE_ERROR_MESSAGE
*/
#ifndef __PRNDFORMATS_H__
#define __PRNDFORMATS_H__ 1

ENTER_PK_NAMESPACE;

PREFAST_PUSH_DISABLE_EXPLAINED( __WARNING_POOR_DATA_ALIGNMENT_25021, "Ignore poor alignment of XBinary data structures" );

#define DRM_PRND_CURRENT_VERSION 1

typedef struct __tagDRM_PRND_MESSAGE_SIGNATURE
{
    DRM_BOOL             fValid;
    DRM_WORD             wSignatureType;
    DRM_XB_BYTEARRAY     xbbaSignature;
} DRM_PRND_MESSAGE_SIGNATURE;

typedef enum __tagDRM_PRND_REGISTRATION_REQUEST_MESSAGE_TYPES 
{
    DRM_PRND_REGISTRATION_REQUEST_BASIC_INFORMATION_ENTRY_TYPE  = 0x1,
    DRM_PRND_REGISTRATION_REQUEST_CUSTOM_DATA_ENTRY_TYPE        = 0x2,
    DRM_PRND_REGISTRATION_REQUEST_MESSAGE_SIGNATURE_ENTRY_TYPE  = 0x3,
} DRM_PRND_REGISTRATION_REQUEST_MESSAGE_TYPES;
/* Count Includes XB_OBJECT_GLOBAL_HEADER */
#define DRM_PRND_REGISTRATION_REQUEST_MESSAGE_TYPE_COUNT       4
#define DRM_PRND_REGISTRATION_REQUEST_MESSAGE_FORMAT_ID        XB_DEFINE_QWORD_FORMAT_ID( 'P', 'R', 'N', 'D', 'R', 'E', 'G', 'R' )

typedef struct __tagDRM_PRND_REGISTRATION_REQUEST_BASIC_INFORMATION
{
    DRM_BOOL             fValid;
    DRM_DWORD            dwFlags;
    DRM_ID               guidPreviousSessionID;
    DRM_XB_BYTEARRAY     xbbaReceiverCertificate;
    DRM_DWORD            dwReceiverRIV;
    DRM_DWORD            dwSupportedProximityDetectionTypes;
    DRM_ID               guidInitialLicenseMessageID;
    DRM_UINT64           qwReceiverCurrentTime;
} DRM_PRND_REGISTRATION_REQUEST_BASIC_INFORMATION;

typedef struct __tagDRM_PRND_REGISTRATION_REQUEST_CUSTOM_DATA
{
    DRM_BOOL             fValid;
    DRM_ID               customDataTypeID;
    DRM_XB_BYTEARRAY     xbbaCustomData;
} DRM_PRND_REGISTRATION_REQUEST_CUSTOM_DATA;

typedef struct __tagDRM_PRND_REGISTRATION_REQUEST_MESSAGE
{
    DRM_BOOL                                            fValid;
    DRM_PRND_REGISTRATION_REQUEST_BASIC_INFORMATION     BasicInformation;
    DRM_PRND_REGISTRATION_REQUEST_CUSTOM_DATA           CustomData;
    DRM_PRND_MESSAGE_SIGNATURE                          Signature;
} DRM_PRND_REGISTRATION_REQUEST_MESSAGE;

DRM_EXPORT_VAR extern DRM_GLOBAL_CONST DRM_XB_FORMAT_DESCRIPTION s_DRM_PRND_REGISTRATION_REQUEST_MESSAGE_FormatDescription[1];

typedef enum __tagDRM_PRND_REGISTRATION_RESPONSE_MESSAGE_TYPES 
{
    DRM_PRND_REGISTRATION_RESPONSE_BASIC_INFORMATION_ENTRY_TYPE      = 0x4,
    DRM_PRND_REGISTRATION_RESPONSE_PROXIMITY_INFORMATION_ENTRY_TYPE  = 0x5,
    DRM_PRND_REGISTRATION_RESPONSE_CUSTOM_DATA_ENTRY_TYPE            = 0x6,
    DRM_PRND_REGISTRATION_RESPONSE_MESSAGE_SIGNATURE_ENTRY_TYPE      = 0x7,
    DRM_PRND_REGISTRATION_RESPONSE_TRANSMITTER_AUTH_ENTRY_TYPE       = 0x17,
} DRM_PRND_REGISTRATION_RESPONSE_MESSAGE_TYPES;
/* Count Includes XB_OBJECT_GLOBAL_HEADER */
#define DRM_PRND_REGISTRATION_RESPONSE_MESSAGE_TYPE_COUNT       6
#define DRM_PRND_REGISTRATION_RESPONSE_MESSAGE_FORMAT_ID        XB_DEFINE_QWORD_FORMAT_ID( 'P', 'R', 'N', 'D', 'R', 'E', 'G', 'S' )

typedef struct __tagDRM_PRND_REGISTRATION_RESPONSE_BASIC_INFORMATION
{
    DRM_BOOL             fValid;
    DRM_DWORD            dwFlags;
    DRM_ID               guidSessionID;
    DRM_XB_BYTEARRAY     xbbaTransmitterRevInfo;
    DRM_WORD             wMIMKEncryptionType;
    DRM_XB_BYTEARRAY     xbbaMIMKEncryptedWithReceiverPubkey;
} DRM_PRND_REGISTRATION_RESPONSE_BASIC_INFORMATION;

typedef struct __tagDRM_PRND_REGISTRATION_RESPONSE_PROXIMITY_INFORMATION
{
    DRM_BOOL             fValid;
    DRM_DWORD            dwProximityDetectionType;
    DRM_XB_BYTEARRAY     xbbaTransmitterProximityDetectionChannel;
} DRM_PRND_REGISTRATION_RESPONSE_PROXIMITY_INFORMATION;

typedef struct __tagDRM_PRND_REGISTRATION_RESPONSE_TRANSMITTER_AUTH
{
    DRM_BOOL             fValid;
    DRM_XB_BYTEARRAY     xbbaTransmitterCertificate;
    DRM_WORD             wTransmitterAuthSignatureType;
    DRM_XB_BYTEARRAY     xbbaTransmitterAuthSignature;
} DRM_PRND_REGISTRATION_RESPONSE_TRANSMITTER_AUTH;

typedef struct __tagDRM_PRND_REGISTRATION_RESPONSE_CUSTOM_DATA
{
    DRM_BOOL             fValid;
    DRM_ID               customDataTypeID;
    DRM_XB_BYTEARRAY     xbbaCustomData;
} DRM_PRND_REGISTRATION_RESPONSE_CUSTOM_DATA;

typedef struct __tagDRM_PRND_REGISTRATION_RESPONSE_MESSAGE
{
    DRM_BOOL                                                 fValid;
    DRM_PRND_REGISTRATION_RESPONSE_BASIC_INFORMATION         BasicInformation;
    DRM_PRND_REGISTRATION_RESPONSE_PROXIMITY_INFORMATION     ProximityInformation;
    DRM_PRND_REGISTRATION_RESPONSE_TRANSMITTER_AUTH          TransmitterAuth;
    DRM_PRND_REGISTRATION_RESPONSE_CUSTOM_DATA               CustomData;
    DRM_PRND_MESSAGE_SIGNATURE                               Signature;
} DRM_PRND_REGISTRATION_RESPONSE_MESSAGE;

DRM_EXPORT_VAR extern DRM_GLOBAL_CONST DRM_XB_FORMAT_DESCRIPTION s_DRM_PRND_REGISTRATION_RESPONSE_MESSAGE_FormatDescription[1];

typedef enum __tagDRM_PRND_REGISTRATION_ERROR_MESSAGE_TYPES 
{
    DRM_PRND_REGISTRATION_ERROR_BASIC_INFORMATION_ENTRY_TYPE  = 0x8,
} DRM_PRND_REGISTRATION_ERROR_MESSAGE_TYPES;
/* Count Includes XB_OBJECT_GLOBAL_HEADER */
#define DRM_PRND_REGISTRATION_ERROR_MESSAGE_TYPE_COUNT       2
#define DRM_PRND_REGISTRATION_ERROR_MESSAGE_FORMAT_ID        XB_DEFINE_QWORD_FORMAT_ID( 'P', 'R', 'N', 'D', 'R', 'E', 'G', 'E' )

typedef struct __tagDRM_PRND_REGISTRATION_ERROR_BASIC_INFORMATION
{
    DRM_BOOL      fValid;
    DRM_DWORD     dwFlags;
    DRM_DWORD     dwResult;
} DRM_PRND_REGISTRATION_ERROR_BASIC_INFORMATION;

typedef struct __tagDRM_PRND_REGISTRATION_ERROR_MESSAGE
{
    DRM_BOOL                                          fValid;
    DRM_PRND_REGISTRATION_ERROR_BASIC_INFORMATION     BasicInformation;
} DRM_PRND_REGISTRATION_ERROR_MESSAGE;

DRM_EXPORT_VAR extern DRM_GLOBAL_CONST DRM_XB_FORMAT_DESCRIPTION s_DRM_PRND_REGISTRATION_ERROR_MESSAGE_FormatDescription[1];

typedef enum __tagDRM_PRND_PROXIMITY_DETECTION_START_MESSAGE_TYPES 
{
    DRM_PRND_PROXIMITY_DETECTION_START_BASIC_INFORMATION_ENTRY_TYPE  = 0x9,
} DRM_PRND_PROXIMITY_DETECTION_START_MESSAGE_TYPES;
/* Count Includes XB_OBJECT_GLOBAL_HEADER */
#define DRM_PRND_PROXIMITY_DETECTION_START_MESSAGE_TYPE_COUNT       2
#define DRM_PRND_PROXIMITY_DETECTION_START_MESSAGE_FORMAT_ID        XB_DEFINE_QWORD_FORMAT_ID( 'P', 'R', 'N', 'D', 'P', 'X', 'S', 'T' )

typedef struct __tagDRM_PRND_PROXIMITY_DETECTION_START_BASIC_INFORMATION
{
    DRM_BOOL      fValid;
    DRM_DWORD     dwFlags;
    DRM_ID        guidSessionID;
} DRM_PRND_PROXIMITY_DETECTION_START_BASIC_INFORMATION;

typedef struct __tagDRM_PRND_PROXIMITY_DETECTION_START_MESSAGE
{
    DRM_BOOL                                                 fValid;
    DRM_PRND_PROXIMITY_DETECTION_START_BASIC_INFORMATION     BasicInformation;
} DRM_PRND_PROXIMITY_DETECTION_START_MESSAGE;

DRM_EXPORT_VAR extern DRM_GLOBAL_CONST DRM_XB_FORMAT_DESCRIPTION s_DRM_PRND_PROXIMITY_DETECTION_START_MESSAGE_FormatDescription[1];

typedef enum __tagDRM_PRND_PROXIMITY_DETECTION_CHALLENGE_MESSAGE_TYPES 
{
    DRM_PRND_PROXIMITY_DETECTION_CHALLENGE_BASIC_INFORMATION_ENTRY_TYPE  = 0xA,
} DRM_PRND_PROXIMITY_DETECTION_CHALLENGE_MESSAGE_TYPES;
/* Count Includes XB_OBJECT_GLOBAL_HEADER */
#define DRM_PRND_PROXIMITY_DETECTION_CHALLENGE_MESSAGE_TYPE_COUNT       2
#define DRM_PRND_PROXIMITY_DETECTION_CHALLENGE_MESSAGE_FORMAT_ID        XB_DEFINE_QWORD_FORMAT_ID( 'P', 'R', 'N', 'D', 'P', 'X', 'C', 'H' )

typedef struct __tagDRM_PRND_PROXIMITY_DETECTION_CHALLENGE_BASIC_INFORMATION
{
    DRM_BOOL      fValid;
    DRM_DWORD     dwFlags;
    DRM_ID        guidSessionID;
    DRM_ID        guidNonce;
} DRM_PRND_PROXIMITY_DETECTION_CHALLENGE_BASIC_INFORMATION;

typedef struct __tagDRM_PRND_PROXIMITY_DETECTION_CHALLENGE_MESSAGE
{
    DRM_BOOL                                                     fValid;
    DRM_PRND_PROXIMITY_DETECTION_CHALLENGE_BASIC_INFORMATION     BasicInformation;
} DRM_PRND_PROXIMITY_DETECTION_CHALLENGE_MESSAGE;

DRM_EXPORT_VAR extern DRM_GLOBAL_CONST DRM_XB_FORMAT_DESCRIPTION s_DRM_PRND_PROXIMITY_DETECTION_CHALLENGE_MESSAGE_FormatDescription[1];

typedef enum __tagDRM_PRND_PROXIMITY_DETECTION_RESPONSE_MESSAGE_TYPES 
{
    DRM_PRND_PROXIMITY_DETECTION_RESPONSE_BASIC_INFORMATION_ENTRY_TYPE  = 0xB,
} DRM_PRND_PROXIMITY_DETECTION_RESPONSE_MESSAGE_TYPES;
/* Count Includes XB_OBJECT_GLOBAL_HEADER */
#define DRM_PRND_PROXIMITY_DETECTION_RESPONSE_MESSAGE_TYPE_COUNT       2
#define DRM_PRND_PROXIMITY_DETECTION_RESPONSE_MESSAGE_FORMAT_ID        XB_DEFINE_QWORD_FORMAT_ID( 'P', 'R', 'N', 'D', 'P', 'X', 'R', 'S' )

typedef struct __tagDRM_PRND_PROXIMITY_DETECTION_RESPONSE_BASIC_INFORMATION
{
    DRM_BOOL      fValid;
    DRM_DWORD     dwFlags;
    DRM_ID        guidSessionID;
    DRM_WORD      wNonceEncryptionType;
    DRM_ID        guidNonceEncryptedWithMK;
} DRM_PRND_PROXIMITY_DETECTION_RESPONSE_BASIC_INFORMATION;

typedef struct __tagDRM_PRND_PROXIMITY_DETECTION_RESPONSE_MESSAGE
{
    DRM_BOOL                                                    fValid;
    DRM_PRND_PROXIMITY_DETECTION_RESPONSE_BASIC_INFORMATION     BasicInformation;
} DRM_PRND_PROXIMITY_DETECTION_RESPONSE_MESSAGE;

DRM_EXPORT_VAR extern DRM_GLOBAL_CONST DRM_XB_FORMAT_DESCRIPTION s_DRM_PRND_PROXIMITY_DETECTION_RESPONSE_MESSAGE_FormatDescription[1];

typedef enum __tagDRM_PRND_PROXIMITY_DETECTION_RESULT_MESSAGE_TYPES 
{
    DRM_PRND_PROXIMITY_DETECTION_RESULT_BASIC_INFORMATION_ENTRY_TYPE  = 0xC,
} DRM_PRND_PROXIMITY_DETECTION_RESULT_MESSAGE_TYPES;
/* Count Includes XB_OBJECT_GLOBAL_HEADER */
#define DRM_PRND_PROXIMITY_DETECTION_RESULT_MESSAGE_TYPE_COUNT       2
#define DRM_PRND_PROXIMITY_DETECTION_RESULT_MESSAGE_FORMAT_ID        XB_DEFINE_QWORD_FORMAT_ID( 'P', 'R', 'N', 'D', 'P', 'X', 'R', 'T' )

typedef struct __tagDRM_PRND_PROXIMITY_DETECTION_RESULT_BASIC_INFORMATION
{
    DRM_BOOL      fValid;
    DRM_DWORD     dwFlags;
    DRM_ID        guidSessionID;
    DRM_DWORD     dwResult;
} DRM_PRND_PROXIMITY_DETECTION_RESULT_BASIC_INFORMATION;

typedef struct __tagDRM_PRND_PROXIMITY_DETECTION_RESULT_MESSAGE
{
    DRM_BOOL                                                  fValid;
    DRM_PRND_PROXIMITY_DETECTION_RESULT_BASIC_INFORMATION     BasicInformation;
} DRM_PRND_PROXIMITY_DETECTION_RESULT_MESSAGE;

DRM_EXPORT_VAR extern DRM_GLOBAL_CONST DRM_XB_FORMAT_DESCRIPTION s_DRM_PRND_PROXIMITY_DETECTION_RESULT_MESSAGE_FormatDescription[1];

typedef enum __tagDRM_PRND_LICENSE_REQUEST_MESSAGE_TYPES 
{
    DRM_PRND_LICENSE_REQUEST_BASIC_INFORMATION_ENTRY_TYPE    = 0xD,
    DRM_PRND_LICENSE_REQUEST_LICENSE_INFORMATION_ENTRY_TYPE  = 0xE,
    DRM_PRND_LICENSE_REQUEST_CUSTOM_DATA_ENTRY_TYPE          = 0xF,
    DRM_PRND_LICENSE_REQUEST_MESSAGE_SIGNATURE_ENTRY_TYPE    = 0x10,
} DRM_PRND_LICENSE_REQUEST_MESSAGE_TYPES;
/* Count Includes XB_OBJECT_GLOBAL_HEADER */
#define DRM_PRND_LICENSE_REQUEST_MESSAGE_TYPE_COUNT       5
#define DRM_PRND_LICENSE_REQUEST_MESSAGE_FORMAT_ID        XB_DEFINE_QWORD_FORMAT_ID( 'P', 'R', 'N', 'D', 'L', 'I', 'C', 'R' )

typedef struct __tagDRM_PRND_LICENSE_REQUEST_BASIC_INFORMATION
{
    DRM_BOOL      fValid;
    DRM_DWORD     dwFlags;
    DRM_ID        guidSessionID;
    DRM_DWORD     dwReceiverRIV;
} DRM_PRND_LICENSE_REQUEST_BASIC_INFORMATION;

typedef struct __tagDRM_PRND_LICENSE_REQUEST_LICENSE_INFORMATION
{
    DRM_BOOL             fValid;
    DRM_WORD             wRequestedAction;
    DRM_WORD             wRequestedActionQualifier;
    DRM_WORD             wContentIdentifierType;
    DRM_XB_BYTEARRAY     xbbaContentIdentifier;
} DRM_PRND_LICENSE_REQUEST_LICENSE_INFORMATION;

typedef struct __tagDRM_PRND_LICENSE_REQUEST_CUSTOM_DATA
{
    DRM_BOOL             fValid;
    DRM_ID               customDataTypeID;
    DRM_XB_BYTEARRAY     xbbaCustomData;
} DRM_PRND_LICENSE_REQUEST_CUSTOM_DATA;

typedef struct __tagDRM_PRND_LICENSE_REQUEST_MESSAGE
{
    DRM_BOOL                                         fValid;
    DRM_PRND_LICENSE_REQUEST_BASIC_INFORMATION       BasicInformation;
    DRM_PRND_LICENSE_REQUEST_LICENSE_INFORMATION     LicenseInformation;
    DRM_PRND_LICENSE_REQUEST_CUSTOM_DATA             CustomData;
    DRM_PRND_MESSAGE_SIGNATURE                       Signature;
} DRM_PRND_LICENSE_REQUEST_MESSAGE;

DRM_EXPORT_VAR extern DRM_GLOBAL_CONST DRM_XB_FORMAT_DESCRIPTION s_DRM_PRND_LICENSE_REQUEST_MESSAGE_FormatDescription[1];

typedef enum __tagDRM_PRND_LICENSE_TRANSMIT_MESSAGE_TYPES 
{
    DRM_PRND_LICENSE_TRANSMIT_BASIC_INFORMATION_ENTRY_TYPE    = 0x11,
    DRM_PRND_LICENSE_TRANSMIT_LICENSE_LIST_ENTRY_TYPE         = 0x12,
    DRM_PRND_LICENSE_TRANSMIT_LICENSE_INFORMATION_ENTRY_TYPE  = 0x13,
    DRM_PRND_LICENSE_TRANSMIT_CUSTOM_DATA_ENTRY_TYPE          = 0x14,
    DRM_PRND_LICENSE_TRANSMIT_MESSAGE_SIGNATURE_ENTRY_TYPE    = 0x15,
} DRM_PRND_LICENSE_TRANSMIT_MESSAGE_TYPES;
/* Count Includes XB_OBJECT_GLOBAL_HEADER */
#define DRM_PRND_LICENSE_TRANSMIT_MESSAGE_TYPE_COUNT       6
#define DRM_PRND_LICENSE_TRANSMIT_MESSAGE_FORMAT_ID        XB_DEFINE_QWORD_FORMAT_ID( 'P', 'R', 'N', 'D', 'L', 'I', 'C', 'T' )

typedef struct __tagDRM_PRND_LICENSE_TRANSMIT_BASIC_INFORMATION
{
    DRM_BOOL             fValid;
    DRM_DWORD            dwFlags;
    DRM_ID               guidSessionID;
    DRM_ID               guidCurrentLicenseMessageID;
    DRM_XB_BYTEARRAY     xbbaTransmitterRevInfo;
} DRM_PRND_LICENSE_TRANSMIT_BASIC_INFORMATION;

typedef struct __tagDRM_PRND_LICENSE_TRANSMIT_LICENSE_INFORMATION
{
    DRM_BOOL                                                   fValid;
    struct __tagDRM_PRND_LICENSE_TRANSMIT_LICENSE_INFORMATION *pNext;

    DRM_XB_BYTEARRAY                                           xbbaReceiverBoundOrLeafXMRLicense;
} DRM_PRND_LICENSE_TRANSMIT_LICENSE_INFORMATION;

typedef struct __tagDRM_PRND_LICENSE_TRANSMIT_LICENSE_LIST
{
    DRM_BOOL                                          fValid;
    DRM_PRND_LICENSE_TRANSMIT_LICENSE_INFORMATION    *pLicenseListHead;
} DRM_PRND_LICENSE_TRANSMIT_LICENSE_LIST;

typedef struct __tagDRM_PRND_LICENSE_TRANSMIT_CUSTOM_DATA
{
    DRM_BOOL             fValid;
    DRM_ID               customDataTypeID;
    DRM_XB_BYTEARRAY     xbbaCustomData;
} DRM_PRND_LICENSE_TRANSMIT_CUSTOM_DATA;

typedef struct __tagDRM_PRND_LICENSE_TRANSMIT_MESSAGE
{
    DRM_BOOL                                        fValid;
    DRM_PRND_LICENSE_TRANSMIT_BASIC_INFORMATION     BasicInformation;
    DRM_PRND_LICENSE_TRANSMIT_LICENSE_LIST          LicenseList;
    DRM_PRND_LICENSE_TRANSMIT_CUSTOM_DATA           CustomData;
    DRM_PRND_MESSAGE_SIGNATURE                      Signature;
} DRM_PRND_LICENSE_TRANSMIT_MESSAGE;

DRM_EXPORT_VAR extern DRM_GLOBAL_CONST DRM_XB_FORMAT_DESCRIPTION s_DRM_PRND_LICENSE_TRANSMIT_MESSAGE_FormatDescription[1];

typedef enum __tagDRM_PRND_LICENSE_ERROR_MESSAGE_TYPES 
{
    DRM_PRND_LICENSE_ERROR_BASIC_INFORMATION_ENTRY_TYPE  = 0x16,
} DRM_PRND_LICENSE_ERROR_MESSAGE_TYPES;
/* Count Includes XB_OBJECT_GLOBAL_HEADER */
#define DRM_PRND_LICENSE_ERROR_MESSAGE_TYPE_COUNT       2
#define DRM_PRND_LICENSE_ERROR_MESSAGE_FORMAT_ID        XB_DEFINE_QWORD_FORMAT_ID( 'P', 'R', 'N', 'D', 'L', 'I', 'C', 'E' )

typedef struct __tagDRM_PRND_LICENSE_ERROR_BASIC_INFORMATION
{
    DRM_BOOL      fValid;
    DRM_DWORD     dwFlags;
    DRM_ID        guidSessionID;
    DRM_DWORD     dwResult;
} DRM_PRND_LICENSE_ERROR_BASIC_INFORMATION;

typedef struct __tagDRM_PRND_LICENSE_ERROR_MESSAGE
{
    DRM_BOOL                                     fValid;
    DRM_PRND_LICENSE_ERROR_BASIC_INFORMATION     BasicInformation;
} DRM_PRND_LICENSE_ERROR_MESSAGE;

DRM_EXPORT_VAR extern DRM_GLOBAL_CONST DRM_XB_FORMAT_DESCRIPTION s_DRM_PRND_LICENSE_ERROR_MESSAGE_FormatDescription[1];

PREFAST_POP;

EXIT_PK_NAMESPACE;

#endif /* __PRNDFORMATS_H__ */
